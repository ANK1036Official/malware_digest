import sys
import os
import shutil
import pathlib
import ntpath
import hashlib
import ssdeep
import pymongo
import urllib.parse
import requests

# Config calls
from config import *

# Mongo creds
username = urllib.parse.quote_plus(mongo_user)
password = urllib.parse.quote_plus(mongo_pass)
mongo_client = pymongo.MongoClient(f"mongodb://{username}:{password}@{mongo_addr}/malware")
db_name = mongo_client["malware"]
db_col = db_name["malware_info"]

try:
    file_mal = sys.argv[1]
except:
    pass
if len(sys.argv) < 2:
    file_mal = input('Enter path to file: ')

with open(file_mal, 'rb') as file_st:
    ## Cryptographic
    file_bytes = file_st.read()
    file_md5 = hashlib.md5(file_bytes).hexdigest()
    file_sha1 = hashlib.sha1(file_bytes).hexdigest()
    file_sha256 = hashlib.sha256(file_bytes).hexdigest()
    ## Fuzzy Hashes
    file_ssdeep = ssdeep.hash(file_bytes)
    ## API functions
    # Virustotal
    if vt_api != '':
        vt_url = f"https://www.virustotal.com/api/v3/files/{file_sha256}"
        headers = {
            "accept": "application/json",
            "x-apikey": vt_api
        }
        vt_response = requests.get(vt_url, headers=headers)
        vt_json = vt_response.json()
        try:
            classification = vt_json["data"]["attributes"]["last_analysis_stats"]["malicious"]
            popular_vt_name = vt_json["data"]["attributes"]["popular_threat_classification"]["suggested_threat_label"]
        except:
            pass
    # Triage
    if triage_api != '':
        headers = {
            "Authorization": f"Bearer {triage_api}",
            "User-Agent": f"Malware Digest {version}"
        }
        try:
            tri_id_url = f"https://api.tria.ge/v0/search?query=sha256:{file_sha256}"
            tri_id_req = requests.get(tri_id_url, headers=headers)
            tri_id_json = tri_id_req.json()
        except:
            print('Error getting triage data...')
            break
        if 'data' in tri_id_json:
            if 'id' in tri_id_json["data"][0]:
                tri_id = tri_id_json["data"][0]["id"]
        try:
            tri_data_url = f"https://api.tria.ge/v0/samples/{tri_id}/overview.json"
            tri_data_req = requests.get(tri_data_url, headers=headers)
            tri_data_json = tri_data_req.json()
        except:
            print('Error getting triage data...')
            break
        if 'analysis' in tri_data_json:
            if 'tags' in tri_data_json['analysis']:
                for tag in tri_data_json['analysis']['tags']:
                    tri_tags += f"{tag} "
            if 'score' in tri_data_json['analysis']:
                tri_score = tri_data_json['analysis']['score']
    ## DB creation
    dict_db = {"file_name": file_mal, "vt_detections": str(str(classification) + '-' + popular_vt_name), "tri_detections": tri_score, "tri_tags": tri_tags, "md5": file_md5, "sha1": file_sha1, "sha256": file_sha256, "ssdeep": file_ssdeep}
    data_conf = db_col.insert_one(dict_db)
    ## Logic functions
    print(f"""
Virustotal: {classification} - {popular_vt_name}
Triage:     {tri_score} - {tri_tags}

MD5:    {file_md5}
SHA1:   {file_sha1}
SHA256: {file_sha256}
ssdeep: {file_ssdeep}

Confirmation ID: {data_conf.inserted_id}
""")

    file_name_str = ntpath.basename(file_mal)
    file_ext = pathlib.Path(file_mal).suffix.replace('.', '')
    if not os.path.exists(file_ext):
        os.makedirs(file_ext)
    new_filename = f"{file_ext}/{file_sha1}.bin"
    shutil.copy2(file_mal, new_filename)
    print(f"Successfully copied {file_mal} to {new_filename}\n")
